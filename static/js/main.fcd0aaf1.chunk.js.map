{"version":3,"sources":["components/Field.jsx","components/Row.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledField","styled","div","_templateObject","props","background","defaultProps","Field","open","bomb","react_default","a","createElement","role","aria-label","onClick","reveal","position","Last","Row_templateObject","Row","row","map","field","i","components_Field","Object","assign","key","Board","App_templateObject","Title","p","_templateObject2","App","state","board","width","height","chance","newGame","_this","setState","prevState","emptyFields","gameState","genBoard","checkField","arguments","length","undefined","x","y","bombs","countBombs","revealField","revealBoard","openNeighbours","counter","this","_this2","j","toString","Math","random","_this3","Array","from","genField","_this4","_this$state","components_Row","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcd0aaf1.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst StyledField = styled.div`\nbackground: ${props => props.background};\nborder: 1px solid black;\nfloat: left;\nfont-size:30px;\ntext-align: center;\nheight: 40px;\nwidth: 40px;\n`\nStyledField.defaultProps = {\n  background: 'lightgrey'\n}\nconst Field = (props) => {\n  let element\n  if (!props.open) {\n    element = <StyledField background='grey' onClick={() => props.reveal(props.position)} />\n  } else if (props.bomb) {\n    element = <StyledField><span role='img' aria-label='bomb'>ðŸ’£</span></StyledField>\n  } else if (props.open === '0') {\n    element = <StyledField />\n  } else {\n    element = <StyledField>{props.open}</StyledField>\n  }\n  return element\n}\n\nField.propTypes = {\n  bomb: PropTypes.bool.isRequired,\n  open: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]).isRequired,\n  position: PropTypes.arrayOf(PropTypes.number).isRequired,\n  reveal: PropTypes.func.isRequired\n}\n\nexport default Field\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport Field from './Field'\n\nconst Last = styled.div`clear: both;`\n\nconst Row = (props) => {\n  return (\n    <div>\n      {props.row.map((field, i) => <Field {...field} reveal={props.reveal} key={i} />)}\n      <Last />\n    </div>\n  )\n}\n\nRow.propTypes = {\n  row: PropTypes.arrayOf(Object),\n  reveal: PropTypes.func.isRequired\n}\n\nexport default Row\n","import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport Row from './components/Row'\n\nconst Board = styled.div`\n  max-width: 1200px;\n`\nconst Title = styled.p`\n  background: yellow;\n  text-align: center;\n  width:100%;\n`\nclass App extends Component {\n  state = {\n    board: [[]],\n    width: 10,\n    height: 10,\n    chance: 10\n  }\n\n  componentDidMount() { this.newGame() }\n  newGame = () => {\n    this.setState(prevState => {\n      return {\n        emptyFields: prevState.width * prevState.height\n      }\n    }, () => {\n      this.setState({\n        gameState: 'playing',\n        board: this.genBoard(\n          this.state.width,\n          this.state.height,\n          this.state.chance\n        )\n      })\n    })\n  }\n\n  checkField = (position, board = this.state.board) => {\n    const x = position[0]\n    const y = position[1]\n    this.setState(prevState => {\n      if (prevState.emptyFields === 1) {\n        return {\n          emptyFields: prevState.emptyFields - 1,\n          gameState: 'Won'\n        }\n      }\n      return { emptyFields: prevState.emptyFields - 1 }\n    })\n    if (board[x][y].open) {\n      return board[x][y].open\n    }\n\n    const bombs = this.countBombs(position, board)\n    board[x][y].open = bombs\n    return board\n  }\n\n  revealField = (position, board = this.state.board) => {\n    const x = position[0]\n    const y = position[1]\n\n    board = this.checkField(position, board)\n    if (board[x][y].bomb) {\n      this.revealBoard('lost')\n    }\n    if (board[x][y].open === \"0\") {\n      this.openNeighbours(position, board)\n    }\n\n    this.setState(prevState => {\n      return { board, counter: prevState.counter + 1 }\n    })\n  }\n\n  revealBoard(gameState) {\n    this.setState(prevState => {\n      return {\n        gameState,\n        board: prevState.board.map(row => row.map(field => (\n          field.open = this.countBombs(field.position, prevState.board)\n        )))\n      }\n    })\n  }\n\n  openNeighbours(position, board) {\n    const x = position[0]\n    const y = position[1]\n    for (let i = x - 1; i <= x + 1; i++) {\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (0 <= i && i < this.state.width && 0 <= j && j < this.state.height) {\n          if (!board[i][j].open) {\n            this.revealField([i, j], board)\n          }\n        }\n      }\n    }\n  }\n\n  countBombs(position, board) {\n    const x = position[0]\n    const y = position[1]\n    if (board[x][y].bomb) {\n      return true\n    }\n    let bombs = 0\n    for (let i = x - 1; i <= x + 1; i++) {\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (0 <= i && i < this.state.width && 0 <= j && j < this.state.height) {\n          if (board[i][j].bomb) {\n            bombs++\n          }\n        }\n      }\n    }\n    return bombs.toString()\n  }\n\n  genField(x, y, chance) {\n    const bomb = (Math.random() < chance / 100)\n    if (bomb) {\n      this.setState(prevState => {\n        return { emptyFields: prevState.emptyFields - 1 }\n      })\n    }\n\n    return {\n      bomb,\n      open: false,\n      position: [x, y]\n    }\n  }\n\n  genBoard(width, height, chance) {\n    return Array.from(Array(width), ((row, i) =>\n      Array.from(Array(height), ((field, j) =>\n        field = this.genField(i, j, chance))\n      )\n    )\n    )\n  }\n\n  render() {\n    const { board, emptyFields, gameState } = this.state\n\n    return (\n      <Board>\n        <Title>To go: {emptyFields} fields</Title>\n        {gameState === 'playing' ?\n          <div /> :\n          <div>\n            <h1>{gameState}</h1>\n            <button onClick={this.newGame}>new game</button>\n          </div>\n        }\n        {board.map((row, i) =>\n          <Row row={row} key={i} reveal={this.revealField}></Row>\n        )}\n      </Board>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}